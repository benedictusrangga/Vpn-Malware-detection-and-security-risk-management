using System;
using System.IO;
using System.Security.Cryptography;
using System.Windows;
using System.Windows.Controls;
using Microsoft.Win32;

namespace ModernVPN.NVVM.View
{
    public partial class SettingsView : UserControl
    {
        private string md5BaseFilePath = "C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\MD5Base.txt"; 
        public SettingsView()
        {
            InitializeComponent();
        }

        private void SelectFileButtonClick(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            if (openFileDialog.ShowDialog() == true)
            {
                txtFilePath.Text = openFileDialog.FileName;

                // Hitung dan tampilkan MD5 hash dari file yang dipilih
                try
                {
                    string md5Hash = CalculateMD5(openFileDialog.FileName);
                    txtMD5Hash.Text = md5Hash;
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error calculating MD5 hash: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ScanFileButtonClick(object sender, RoutedEventArgs e)
        {
            string filePath = txtFilePath.Text;
            if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
            {
                MessageBox.Show("Please select a valid file to scan.");
                return;
            }

            try
            {
                string md5Hash = CalculateMD5(filePath);

                if (IsInfected(md5Hash))
                {
                    MessageBox.Show("Infected! File matches MD5 in the database.", "Scan Result", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
                else
                {
                    MessageBox.Show("Safe! File does not match any MD5 in the database.", "Scan Result", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error scanning file: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private string CalculateMD5(string filePath)
        {
            using (var md5 = MD5.Create())
            {
                using (var stream = File.OpenRead(filePath))
                {
                    byte[] hash = md5.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
        }

        private bool IsInfected(string md5Hash)
        {
            string[] md5BaseLines = File.ReadAllLines(md5BaseFilePath);

            foreach (string line in md5BaseLines)
            {
                string[] parts = line.Split(',');
                if (parts.Length >= 2)
                {
                    string md5FromBase = parts[0].Trim();
                    if (md5Hash.Equals(md5FromBase, StringComparison.OrdinalIgnoreCase))
                    {
                        return true;
                    }
                }
            }

            return false;
        }
    }
}
