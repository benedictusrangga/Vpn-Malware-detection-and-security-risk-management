using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Xml.Serialization;

namespace ModernVPN.NVVM.View
{
    public partial class About : UserControl
    {
        // Initialize ObservableCollection to store the list of tasks
        private ObservableCollection<string> tasks;
        // Initialize Hashtable to map deadlines to tasks
        private Hashtable taskHashtable;
        // File path for XML to store the list of tasks
        private string todoListFilePath = "todolist.xml";

        public About()
        {
            InitializeComponent();

            tasks = new ObservableCollection<string>();
            taskHashtable = new Hashtable();

            // Initialize ObservableCollection and Hashtable    
            LoadTodoList();
            todoListBox.ItemsSource = tasks;
        }

        private void LoadTodoList()
        {
            if (File.Exists(todoListFilePath))
            {
                using (var reader = new StreamReader(todoListFilePath))
                {
                    var serializer = new XmlSerializer(typeof(ObservableCollection<string>));
                    var loadedTasks = (ObservableCollection<string>)serializer.Deserialize(reader);

                    tasks.Clear();
                    foreach (var task in loadedTasks)
                    {
                        tasks.Add(task);
                        var deadline = task.Split(new[] { "(Deadline: ", ")" }, StringSplitOptions.RemoveEmptyEntries)[1];
                        taskHashtable.Add(deadline, task);
                    }
                }
            }
        }

        private void SaveTodoList()
        {
            using (var writer = new StreamWriter(todoListFilePath))
            {
                var serializer = new XmlSerializer(typeof(ObservableCollection<string>));
                serializer.Serialize(writer, tasks);
            }
        }

        private void AddTask_Click(object sender, RoutedEventArgs e)
        {
            string newTask = newTaskTextBox.Text.Trim();
            string deadline = deadlineTextBox.Text.Trim();

            if (!string.IsNullOrEmpty(newTask) && !string.IsNullOrEmpty(deadline))
            {
                string taskWithDeadline = $"{newTask} (Deadline: {deadline})";

                tasks.Add(taskWithDeadline);
                taskHashtable.Add(deadline, taskWithDeadline);

                newTaskTextBox.Text = "Enter Task";
                deadlineTextBox.Text = "Enter Deadline (e.g., yyyy-MM-dd HH:mm:ss)";
            }
        }

        private void DeleteTask_Click(object sender, RoutedEventArgs e)
        {
            for (int i = todoListBox.Items.Count - 1; i >= 0; i--)
            {
                ListBoxItem listBoxItem = todoListBox.ItemContainerGenerator.ContainerFromIndex(i) as ListBoxItem;

                if (listBoxItem != null)
                {
                    CheckBox checkBox = FindVisualChild<CheckBox>(listBoxItem);

                    if (checkBox != null && checkBox.IsChecked == true)
                    {
                        string selectedDeadline = taskHashtable.Keys.OfType<string>().ElementAt(i);
                        taskHashtable.Remove(selectedDeadline);

                        tasks.RemoveAt(i);
                    }
                }
            }
        }

        private T FindVisualChild<T>(DependencyObject parent) where T : DependencyObject
        {
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(parent); i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(parent, i);

                if (child != null && child is T)
                {
                    return (T)child;
                }
                else
                {
                    T childOfChild = FindVisualChild<T>(child);
                    if (childOfChild != null)
                    {
                        return childOfChild;
                    }
                }
            }

            return null;
        }

        private void SearchTask_Click(object sender, RoutedEventArgs e)
        {
            string searchTime = searchTimeTextBox.Text.Trim();
            if (!string.IsNullOrEmpty(searchTime))
            {
                if (taskHashtable.ContainsKey(searchTime))
                {
                    string foundTask = taskHashtable[searchTime] as string;
                    searchResultLabel.Content = $"Task found: {foundTask}";
                }
                else
                {
                    searchResultLabel.Content = "Task not found.";
                }
            }
            else
            {
                searchResultLabel.Content = "Please enter a search time.";
            }
        }

        private void TextBox_GotFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (textBox != null && textBox.Text.StartsWith("Enter"))
            {
                textBox.Text = "";
            }
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            if (textBox != null && string.IsNullOrWhiteSpace(textBox.Text))
            {
                textBox.Text = textBox.Name.Contains("search") ? "Enter Search Time" : "Enter Placeholder Text";
            }
        }
    }
}
