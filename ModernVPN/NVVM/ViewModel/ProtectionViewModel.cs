using ModernVPN.Core;
using ModernVPN.NVVM.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace ModernVPN.NVVM.ViewModel
{
    public class ServerModel
    {
   
        public string Country { get; set; }
        public string ServerName { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string FlagImagePath { get; set; }

        public double Speed { get; set; }

        public string PbkPath
        {
            get
            {
                return $"{Directory.GetCurrentDirectory()}/VPN/{ServerName}.pbk";
            }
        }
    }

    // Represents an internal class for managing the server graph.
    internal class ServerGraph
    {
        // Data structure: Graph (represented using adjacency list).
        // Data sturcutr: Hashtable(represented using dictionary).
        private Dictionary<string, Dictionary<string, double>> adjacencyList;

        // Constructor initializes the adjacency list for the graph.
        public ServerGraph()
        {
           
            adjacencyList = new Dictionary<string, Dictionary<string, double>>();
        }

        // Adds a server node to the graph with its neighbors and connection weights.
        public void AddServer(string serverName, Dictionary<string, double> neighbors)
        {
            adjacencyList[serverName] = neighbors;
        }

        // Finds the fastest path between two servers using Dijkstra's algorithm.
        public List<string> GetFastestPath(string source, string destination)
        {
            var distances = new Dictionary<string, double>();
            var previous = new Dictionary<string, string>();
            var queue = new List<string>();

            foreach (var vertex in adjacencyList.Keys)
            {
                distances[vertex] = double.MaxValue;
                previous[vertex] = null;
                queue.Add(vertex);
            }

            distances[source] = 0.0;

            while (queue.Count > 0)
            {
                var currentVertex = queue.OrderBy(v => distances[v]).First();
                queue.Remove(currentVertex);

                foreach (var neighbor in adjacencyList[currentVertex])
                {
                    var alternativeRoute = distances[currentVertex] + neighbor.Value;
                    if (alternativeRoute < distances[neighbor.Key])
                    {
                        distances[neighbor.Key] = alternativeRoute;
                        previous[neighbor.Key] = currentVertex;
                    }
                }
            }

            var path = new List<string>();
            var current = destination;

            while (current != null)
            {
                path.Add(current);
                current = previous[current];
            }

            path.Reverse();
            return path;
        }
    }

    // Represents a ViewModel for managing connection status and commands.
    internal class ProtectionViewModel : ObservableObject
    {
        public ObservableCollection<ServerModel> Servers { get; set; }

        private ServerModel _selectedServer;
        public ServerModel SelectedServer
        {
            get { return _selectedServer; }
            set
            {
                _selectedServer = value;
                OnPropertyChanged();
            }
        }

        public void SetSelectedServer(ServerModel selectedServer)
        {
            SelectedServer = selectedServer;
        }

        private string _connectionStatus;
        public string ConnectionStatus
        {
            get { return _connectionStatus; }
            set
            {
                _connectionStatus = value;
                OnPropertyChanged();
            }
        }

        public RelayCommand ConnectCommand { get; set; }
        public RelayCommand AutoSelectServerCommand { get; set; }

        public ProtectionViewModel()
        {
            Servers = new ObservableCollection<ServerModel>();

            AddServer("USA1", "US1.vpnbook.com");
            AddServer("USA2", "US2.vpnbook.com");
            AddServer("Canada", "CA196.vpnbook.com");
            AddServer("Germany1", "DE20.vpnbook.com");
            AddServer("Germany2", "DE220.vpnbook.com");
            AddServer("France1", "FR200.vpnbook.com");
            AddServer("France2", "FR231.vpnbook.com");
            AddServer("Poland1", "PL134.vpnbook.com");
            AddServer("Poland2", "PL140.vpnbook.com");
            AddServer("UK1", "UK205.vpnbook.com");
            AddServer("UK2", "UK68.vpnbook.com");

            ConnectCommand = new RelayCommand(o =>
            {
                Task.Run(() =>
                {
                    ConnectionStatus = "Connecting..";
                    var process = new Process();
                    process.StartInfo.FileName = "cmd.exe";
                    process.StartInfo.WorkingDirectory = Environment.CurrentDirectory;

                    process.StartInfo.Arguments = $"/c rasdial MyServer vpnbook dnx97sa /phonebook:\"{SelectedServer.PbkPath}\"";
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;

                    process.Start();
                    process.WaitForExit();

                    switch (process.ExitCode)
                    {
                        case 0:
                            Debug.WriteLine("Success!");
                            ConnectionStatus = "Connected!";
                            break;
                        case 691:
                            Debug.WriteLine("Wrong credentials!");
                            break;
                        default:
                            Console.WriteLine($"Error: {process.ExitCode}");
                            break;
                    }
                });
            });

            AutoSelectServerCommand = new RelayCommand(o =>
            {
                Task.Run(async () =>
                {
                    ConnectionStatus = "Auto Selecting Server...";
                    var fastestServer = await AutoSelectFastestServer();
                    if (fastestServer != null)
                    {
                        SelectedServer = fastestServer;
                        ConnectionStatus = "Auto Selected Server!";
                    }
                    else
                    {
                        ConnectionStatus = "No available servers or error occurred.";
                    }
                });
            });

            ServerBuilder();
        }

        private string GetFlagImagePathForCountry(string country)
        {
            switch (country)
            {
                case "USA1":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\USA.png";    
                case "USA2":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\USA.png";
                case "Canada":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\Canada.jpg";
                case "Germany1":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\German.jpg";
                case "Germany2":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\German.jpg";
                case "France1":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\France.png";
                case "France2":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\France.png";
                case "Poland1":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\Poland.png";
                case "Poland2":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\Poland.png";
                case "UK1":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\Uk.jpeg";
                case "UK2":
                    return $"C:\\Users\\sirju\\OneDrive\\Documents\\smester 5\\ModernVPN\\ModernVPN\\flag\\Uk.jpeg"; ;
                default:
                    return "";
            }
        }

        private async Task<double> MeasureServerSpeed(string serverAddress)
        {
            var stopwatch = new Stopwatch();
            var serverEndpoint = $"http://{serverAddress}";

            try
            {
                stopwatch.Start();
                var reply = await new System.Net.NetworkInformation.Ping().SendPingAsync(serverEndpoint);
                stopwatch.Stop();

                if (reply.Status == System.Net.NetworkInformation.IPStatus.Success)
                    return 1.0 / stopwatch.Elapsed.TotalSeconds;
                else
                    return 0.0;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error measuring server speed: {ex.Message}");
                return 0.0;
            }
        }

        private async Task<ServerModel> AutoSelectFastestServer()
        {
            ServerModel fastestServer = null;
            double maxSpeed = 0;

            foreach (var server in Servers)
            {
                var speed = await MeasureServerSpeed(server.ServerName);
                if (speed > maxSpeed)
                {
                    maxSpeed = speed;
                    fastestServer = server;
                }
            }

            return fastestServer;
        }

        private async void AddServer(string country, string serverAddress)
        {
            var server = new ServerModel
            {
                Country = country,
                ServerName = serverAddress,
                FlagImagePath = GetFlagImagePathForCountry(country),
            };

            server.Speed = await MeasureServerSpeed(server.ServerName);

            if (!Servers.Any(s => s.ServerName == server.ServerName))
            {
                Servers.Add(server);
                BuildServerConfiguration(server);
            }
        }


        private void BuildServerConfiguration(ServerModel server)
        {
            var address = server.ServerName;
            var folderPath = $"{Directory.GetCurrentDirectory()}/VPN";
            var pbkPath = $"{folderPath}/{address}.pbk";
            if (!Directory.Exists(folderPath))
                Directory.CreateDirectory(folderPath);

            if (!File.Exists(pbkPath))
            {
                var sb = new StringBuilder();
                sb.AppendLine("[MyServer]");
                sb.AppendLine("MEDIA=rastapi");
                sb.AppendLine("Port=VPN2-0");
                sb.AppendLine("Device=WAN Miniport(IKEv2)");
                sb.AppendLine("DEVICE=vpn");
                sb.AppendLine($"PhoneNumber={address}");
                File.WriteAllText(pbkPath, sb.ToString());
            }
        }

        private void ServerBuilder()
        {
            foreach (var server in Servers)
            {
                BuildServerConfiguration(server);
            }
        }
    }
}
