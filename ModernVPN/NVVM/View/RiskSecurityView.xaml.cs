using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;

namespace ModernVPN.NVVM.View
{
    public partial class RiskSecurityView : UserControl
    {
        public RiskSecurityView()
        {
            InitializeComponent();
        }
       
        private Dictionary<string, string> mitigationSteps = new Dictionary<string, string>();
        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
           
        }

        private Brush GetRiskTextColor(int totalScore)
        {
            SolidColorBrush textColorBrush = Brushes.White;
            return textColorBrush;
        }

        private void SubmitButtonClick(object sender, RoutedEventArgs e)
        {
            DisplaySummary();
            Risk.Visibility = Visibility.Visible;

            int totalScore = CalculateTotalScore();
            Brush backgroundBrush = GetBackgroundBrushByTotalScore(totalScore);
            totalScoreTextBlock.Text = $"Total Score: {totalScore}";
            totalScoreTextBlock.Background = backgroundBrush;
            totalScoreTextBlock.Visibility = Visibility.Visible;

            string riskText = GetRiskTextByTotalScore(totalScore);
            riskDescriptionTextBlock.Text = riskText;

            riskDescriptionTextBlock.Background = GetRiskBackgroundBrushByTotalScore(totalScore);

            riskDescriptionTextBlock.Foreground = GetRiskTextColor(totalScore);

            riskDescriptionTextBlock.Visibility = Visibility.Visible;

            summaryText.Visibility = summaryText.Inlines.Any() ? Visibility.Visible : Visibility.Collapsed;
        }

        private Brush GetRiskBackgroundBrushByTotalScore(int totalScore)
        {

            if (totalScore >= 0 && totalScore <= 1)
            {
                return Brushes.Black;
            }
            else if (totalScore >= 1 && totalScore <= 30)
            {
                return Brushes.Green; 
            }
            else if (totalScore >= 31 && totalScore <= 50)
            {
                return Brushes.Yellow; 
            }
            else if (totalScore >= 51 && totalScore <= 90)
            {
                return Brushes.Red; 
            }
            else if (totalScore >= 91 && totalScore <= 110)
            {
                return Brushes.DarkRed; 
            }
            else
            {
                return Brushes.Transparent; 
            }
        }








        private string GetRiskTextByTotalScore(int totalScore)
        {


            if (totalScore >= 0 && totalScore <= 1)
            {
                return "You have Implement all, you are definitely safe";
            }

            else if (totalScore >= 1 && totalScore <= 30)
            {
                return "Low Risk";
            }
            else if (totalScore >= 31 && totalScore <= 50)
            {
                return "Medium Risk";
            }
            else if (totalScore >= 51 && totalScore <= 80)
            {
                return "High Risk";
            }
            else if (totalScore >= 81 && totalScore <= 110)
            {
                return "Very High Risk";
            }
            else
            {
                return "Unknown Risk";
            }
        }


        private int CalculateTotalScore()
        {
            int totalScore = 0;

            foreach (StackPanel riskPanel in stackPanelMain.Children.OfType<StackPanel>())
            {
                if (riskPanel.Children.OfType<CheckBox>().Any(cb => cb.IsChecked == false))
                {
                    foreach (CheckBox checkBox in riskPanel.Children.OfType<CheckBox>().Where(cb => cb.IsChecked == false))
                    {
                        if (int.TryParse(checkBox.Tag.ToString(), out int score))
                        {
                            totalScore += score;
                        }
                    }
                }
            }

            return totalScore;
        }





       
        private void DisplaySummary()
        {
            int totalScore = 0;

            summaryText.Inlines.Clear();

            foreach (StackPanel riskPanel in stackPanelMain.Children.OfType<StackPanel>())
            {
                if (riskPanel.Children.OfType<CheckBox>().Any(cb => cb.IsChecked == false))
                {
                    string riskDescription = (riskPanel.Children.OfType<TextBlock>().FirstOrDefault()?.Text) ?? "Unknown Risk";

                    TextBlock riskDescriptionTextBlock = new TextBlock
                    {
                        Text = $"Risk Description: {riskDescription}",
                        Foreground = Brushes.Black,
                        FontWeight = FontWeights.Bold,
                        FontSize = 20,
                        TextAlignment = TextAlignment.Center
                    };

                    summaryText.Inlines.Add(riskDescriptionTextBlock);
                    summaryText.Inlines.Add(new LineBreak());
                    summaryText.Inlines.Add(new LineBreak());

                    int summaryNumber = 1;

                    foreach (CheckBox checkBox in riskPanel.Children.OfType<CheckBox>().Where(cb => cb.IsChecked == false))
                    {
                        string itemName = checkBox.Content.ToString();
                        if (int.TryParse(checkBox.Tag.ToString(), out int score))
                        {
                            totalScore += score;

                            string securityLevel = GetSecurityLevel(score);

                            TextBlock itemTextBlock = new TextBlock
                            {
                                Text = $"{summaryNumber}. {itemName}-{securityLevel}",
                                Background = GetBackgroundBrush(securityLevel),
                                Foreground = Brushes.Black
                            };

                            summaryText.Inlines.Add(itemTextBlock);
                            summaryText.Inlines.Add(new LineBreak());

                            string steps = GetCompletionSteps(itemName);
                            TextBlock stepsTextBlock = new TextBlock
                            {
                                Text = steps,
                                Margin = new Thickness(20, 0, 0, 0)
                            };

                            summaryText.Inlines.Add(stepsTextBlock);
                            summaryText.Inlines.Add(new LineBreak());

                            summaryNumber++;
                        }
                    }

                    summaryText.Inlines.Add(new LineBreak());
                }
            }

        
            totalScoreTextBlock.Text = $"Total Score: {totalScore}";
            totalScoreTextBlock.Visibility = Visibility.Visible;

         
            summaryText.Visibility = summaryText.Inlines.Any() ? Visibility.Visible : Visibility.Collapsed;
        }



        private string GetSecurityLevel(int score)
        {
            if (score >= 1 && score <= 3)
            {
                return "Low";
            }
            else if (score >= 4 && score <= 6)
            {
                return "Medium";
            }
            else if (score >= 7 && score <= 10)
            {
                return "High";
            }
            else
            {
              
                return "Unknown";
            }
        }

        private Brush GetBackgroundBrushByTotalScore(int totalScore)
        {

            if (totalScore >= 0 && totalScore <= 1)
            {
                return Brushes.Black;
            }
            else if (totalScore >= 1 && totalScore <= 30)
            {
                return Brushes.Green;
            }
            else if (totalScore >= 31 && totalScore <= 50)
            {
                return Brushes.Yellow;
            }
            else if (totalScore >= 51 && totalScore <= 90)
            {
                return Brushes.Red;
            }
            else if (totalScore >= 91 && totalScore <= 110)
            {
                return Brushes.DarkRed;
            }
            else
            {
                return Brushes.Transparent;
            }
        }

        private Brush GetBackgroundBrush(string securityLevel)
        {
            switch (securityLevel)
            {
                case "High":
                    return Brushes.Red;
                case "Medium":
                    return Brushes.Yellow;
                case "Low":
                    return Brushes.Green;
                default:
                    return Brushes.Transparent;
            }
        }




        private string GetCompletionSteps(string itemName)
        {
   
            switch (itemName.ToUpper())
            {
                case "ENCRYPTION TO SENSITIVE DATA":
                    return " To address the medium-level risk associated with data encryption:\n" +
                           "1. Identify sensitive data that requires encryption.\n" +
                           "2. Choose a robust encryption algorithm and key management strategy.\n" +
                           "3. Implement encryption mechanisms in data storage and transmission processes.\n" +
                           "4. Regularly update and patch encryption tools to address vulnerabilities.\n";

                case "ACCESS CONTROL MEASURES":
                    return "\n To address the high level risk associated with access control:\n" +
                           "1. Implement strict access controls, limiting user access based on roles and responsibilities.\n" +
                           "2. Regularly review and update access permissions to align with business needs.\n" +
                           "3. Monitor and log user activities to detect and respond to unauthorized access.\n";

                case "REGULAR DATA BACKUPS":
                    return "\n To address the medium-level risk associated with regular data backups:\n" +
                           "1. Establish a routine backup schedule for critical data.\n" +
                           "2. Store backup copies in secure, offsite locations to prevent data loss in case of disasters.\n" +
                           "3. Test data restoration procedures periodically to ensure the effectiveness of backups.\n";

                case "USER TRAININGS":
                    return "\n To address the high-level risk associated with user training:\n" +
                           "1. Provide ongoing education to employees on data security best practices.\n" +
                           "2. Conduct regular security awareness training sessions to keep employees informed about evolving threats.\n" +
                           "3. Encourage reporting of security incidents or suspicious activities.\n";

           
                case "USE OF VPN (VIRTUAL PRIVATE NETWORK)":
                    return "\n To address the low-level risk related to network vulnerability using VPN:\n" +
                           "1. Implement a Virtual Private Network (VPN) solution.\n" +
                           "2. Ensure all remote connections are secured through VPN.\n" +
                           "3. Regularly update and patch VPN software to address security vulnerabilities.\n" +
                           "4. Educate employees on the importance of using VPN for secure remote access.";

                case "USE ANTIVIRUS SOFTWARE":
                    return "\n To address the high-level risk associated with using antivirus:\n" +
                           "1. Install reliable antivirus software on all endpoints.\n" +
                           "2. Keep antivirus definitions up to date to detect and remove new threats.\n" +
                           "3. Schedule regular scans of systems and devices to identify and eliminate malware.\n" +
                           "4. Educate employees on recognizing and reporting suspicious activities or malware.\n";

                case "REGULAR SECURITY AUDITS":
                    return "\nTo address the medium-level risk associated with regular security audits:\n" +
                           "1. Conduct periodic security audits to identify vulnerabilities and weaknesses.\n" +
                           "2. Review and update security policies and procedures based on audit findings.\n" +
                           "3. Involve both internal and external experts in the audit process for comprehensive assessments.\n" +
                           "4. Develop and implement corrective actions based on audit recommendations.\n";

                case "EMPLOYEE TRAINING ON NETWORK SECURITY":
                    return "\n To address the high-level risk associated with employee training on network security:\n" +
                           "1. Provide comprehensive training on secure network practices for all employees.\n" +
                           "2. Include topics such as password hygiene, recognizing phishing attempts, and secure browsing.\n" +
                           "3. Conduct regular training sessions to keep employees informed about emerging network threats.\n" +
                           "4. Establish a reporting system for employees to report any suspicious network-related activities.";

           

            
                case "EMPLOYEE TRAINING":
                    return "\n To address the high-level risk associated with employee training:\n" +
                           "1. Conduct regular phishing awareness training for all employees.\n" +
                           "2. Provide examples of phishing emails and tactics to watch out for.\n" +
                           "3. Emphasize the importance of verifying email sources and avoiding clicking on suspicious links.\n" +
                           "4. Establish a reporting system for employees to report potential phishing attempts.\n";

                case "EMAIL FILTERING":
                    return "\n To address the high-level risk associated with email filtering:\n" +
                           "1. Implement advanced email filtering systems to identify and block phishing emails.\n" +
                           "2. Configure filters to recognize common phishing indicators, such as suspicious links and email sources.\n" +
                           "3. Regularly update and enhance email filtering rules based on evolving phishing techniques.\n" +
                           "4. Monitor and analyze filtered emails to identify potential false positives or negatives.";

                case "MULTI-FACTOR AUTHENTICATION (MFA)":
                    return "\n To address the high-level risk associated with multi-factor authentication (MFA):\n" +
                           "1. Enforce MFA for accessing sensitive systems and applications.\n" +
                           "2. Implement a variety of MFA methods, such as SMS codes, authenticator apps, or biometrics.\n" +
                           "3. Educate employees on the importance of using and protecting MFA credentials.\n" +
                           "4. Regularly review and update MFA settings to align with security best practices.\n";

                case "USER ACCESS MONITORING":
                    return "\nTo address the high-level risk associated with user access monitoring:\n" +
                           "1. Implement user access monitoring tools to track and log user activities.\n" +
                           "2. Define and enforce least privilege access policies.\n" +
                           "3. Regularly review and audit user access logs for any suspicious activities.\n" +
                           "4. Establish response procedures for handling identified insider threats.\n";

                case "BEHAVIORAL ANALYTICS":
                    return "\n To address the high-level risk associated with behavioral analytics:\n" +
                           "1. Deploy behavioral analytics tools to analyze user behavior patterns.\n" +
                           "2. Establish baseline behavior profiles for normal user activities.\n" +
                           "3. Configure alerts and triggers to identify deviations from established behavior.\n" +
                           "4. Regularly review and update behavioral analytics algorithms to enhance accuracy.\n";

                case "DATA LOSS PREVENTION":
                    return "\nTo address the high-level risk associated with data loss prevention (DLP):\n" +
                           "1. Implement DLP measures to monitor, detect, and prevent the unauthorized transfer of sensitive data.\n" +
                           "2. Classify and label sensitive data to ensure proper handling and protection.\n" +
                           "3. Configure DLP policies to block or alert on the transmission of sensitive data outside secure networks.\n" +
                           "4. Conduct regular DLP audits to assess the effectiveness of data protection measures.\n";

                case "EMPLOYEE EDUCATION":
                    return "\n To address the medium-level risk associated with employee education:\n" +
                           "1. Provide ongoing training to employees on security policies.\n" +
                           "2. Emphasize the importance of confidentiality and the consequences of insider threats.\n" +
                           "3. Educate employees on recognizing and reporting suspicious activities.\n" +
                           "4. Foster a culture of security awareness and accountability throughout the organization.\n";

                default: 
                    return "No steps available for the specified risk.";
            }

        }
    }
}
